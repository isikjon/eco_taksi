import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';
import 'api_service.dart';
import 'user_data_service.dart';
import 'database_service.dart';
import '../utils/phone_utils.dart';

class AuthService {
  static const String _isLoggedInKey = 'is_logged_in';
  static const String _clientDataKey = 'client_data';

  static Future<Map<String, dynamic>> checkUserStatus(String phone, String smsCode) async {
    try {
      print('üîç AuthService.checkUserStatus called with phone: $phone, smsCode: $smsCode');
      final response = await ApiService.instance.loginClient(phone, smsCode);
      print('üîç AuthService.checkUserStatus response: $response');
      
      if (response['success']) {
        final data = response['data'];
        // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É: data.data.client
        final nestedData = data?['data'];
        final clientData = nestedData?['client'];
        final isNewUserFromApi = nestedData?['isNewUser'] ?? nestedData?['is_new_user'] ?? false;
        
        print('üîç Parsed data: nestedData=$nestedData, clientData=$clientData, isNewUserFromApi=$isNewUserFromApi');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –æ—Ç–≤–µ—Ç–µ
        if (clientData != null) {
          // –≠—Ç–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞
          if (clientData['is_active'] == false) {
            return {
              'success': false,
              'error': 'blocked',
              'message': '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
            };
          }
          
          return {
            'success': true,
            'isNewUser': false,
            'client': clientData,
          };
        } else {
          // –≠—Ç–æ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞)
          return {
            'success': true,
            'isNewUser': true,
            'client': null,
          };
        }
      } else {
        return {
          'success': false,
          'error': response['error'],
        };
      }
    } catch (e) {
      return {
        'success': false,
        'error': '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: $e',
      };
    }
  }

  static Future<Map<String, dynamic>> saveUserDataFromStatus(Map<String, dynamic> statusResponse) async {
    try {
      print('üíæ AuthService.saveUserDataFromStatus called with: $statusResponse');
      
      final clientData = statusResponse['client'];
      if (clientData != null) {
        if (clientData['is_active'] == false) {
          return {
            'success': false,
            'error': 'blocked',
            'message': '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
          };
        }
        
        final prefs = await SharedPreferences.getInstance();
        await prefs.setBool(_isLoggedInKey, true);
        await prefs.setString(_clientDataKey, jsonEncode(clientData));
        print('üíæ Saved client data from status: ${jsonEncode(clientData)}');

        final String normalizedPhone = PhoneUtils.normalizePhoneNumber(clientData['phone_number'] ?? '');
        await UserDataService.instance.savePhoneNumber(normalizedPhone);

        return {
          'success': true,
          'client': clientData,
        };
      } else {
        return {
          'success': false,
          'error': '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
        };
      }
    } catch (e) {
      return {
        'success': false,
        'error': '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: $e',
      };
    }
  }

  static Future<Map<String, dynamic>> login(String phone, String smsCode) async {
    try {
      print('üîë AuthService.login called with phone: $phone, smsCode: $smsCode');
      final response = await ApiService.instance.loginClient(phone, smsCode);
      print('üîë AuthService.login response: $response');
      
      if (response['success']) {
        final data = response['data'];
        // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É: data.data.client
        final nestedData = data?['data'];
        final clientData = nestedData?['client'];
        
        print('üîë Parsed login data: nestedData=$nestedData, clientData=$clientData');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –æ—Ç–≤–µ—Ç–µ
        if (clientData != null) {
          // –≠—Ç–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞
          if (clientData['is_active'] == false) {
            return {
              'success': false,
              'error': 'blocked',
              'message': '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
            };
          }
          
          // –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
          final prefs = await SharedPreferences.getInstance();
          await prefs.setBool(_isLoggedInKey, true);
          await prefs.setString(_clientDataKey, jsonEncode(clientData));
          print('Saved client data: ${jsonEncode(clientData)}');
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ UserDataService (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä)
          final String normalizedPhone = PhoneUtils.normalizePhoneNumber(phone);
          await UserDataService.instance.savePhoneNumber(normalizedPhone);
          
          return {
            'success': true,
            'isNewUser': false,
            'client': clientData,
          };
        } else {
          // –≠—Ç–æ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞)
          return {
            'success': true,
            'isNewUser': true,
            'client': null,
          };
        }
      } else {
        return {
          'success': false,
          'error': response['error'],
        };
      }
    } catch (e) {
      return {
        'success': false,
        'error': '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: $e',
      };
    }
  }

  static Future<void> logout() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      
      // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      await prefs.remove(_isLoggedInKey);
      await prefs.remove(_clientDataKey);
      
      // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ UserDataService
      await UserDataService.instance.clearUserData();
      
      // –û—á–∏—â–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await DatabaseService.clearAllData();
      
      // –û—á–∏—â–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      await prefs.clear();
      
      print('‚úÖ Logout successful - all data cleared');
    } catch (e) {
      print('‚ùå Error during logout: $e');
    }
  }

  static Future<bool> isLoggedIn() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      return prefs.getBool(_isLoggedInKey) ?? false;
    } catch (e) {
      return false;
    }
  }

  static Future<Map<String, dynamic>> registerClient(Map<String, dynamic> userData) async {
    try {
      final response = await ApiService.instance.registerClient(userData);
      
      if (response['success']) {
        final data = response['data'];
        final clientData = data?['client'];
        
        if (clientData != null) {
          final prefs = await SharedPreferences.getInstance();
          await prefs.setBool(_isLoggedInKey, true);
          await prefs.setString(_clientDataKey, jsonEncode(clientData));
          print('Saved client data after registration: ${jsonEncode(clientData)}');
          
          final String normalizedPhone = PhoneUtils.normalizePhoneNumber(userData['user']['phoneNumber']);
          await UserDataService.instance.savePhoneNumber(normalizedPhone);
          
          return {
            'success': true,
            'data': {
              'client': clientData,
            },
          };
        } else {
          // –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ login
          final String phone = userData['user']['phoneNumber'];
          final loginResponse = await ApiService.instance.loginClient(phone, '1111'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥
          
          if (loginResponse['success'] && !loginResponse['isNewUser']) {
            final existingClientData = loginResponse['data']?['client'];
            if (existingClientData != null) {
              final prefs = await SharedPreferences.getInstance();
              await prefs.setBool(_isLoggedInKey, true);
              await prefs.setString(_clientDataKey, jsonEncode(existingClientData));
              print('Saved existing client data: ${jsonEncode(existingClientData)}');
              
              final String normalizedPhone = PhoneUtils.normalizePhoneNumber(phone);
              await UserDataService.instance.savePhoneNumber(normalizedPhone);
              
              return {
                'success': true,
                'data': {
                  'client': existingClientData,
                },
              };
            }
          }
        }
      }
      
      return {
        'success': false,
        'error': response['error'] ?? '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
      };
    } catch (e) {
      print('Registration error: $e');
      return {
        'success': false,
        'error': '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e',
      };
    }
  }

  static Future<Map<String, dynamic>?> getCurrentClient() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final clientDataString = prefs.getString(_clientDataKey);
      print('Raw client data string: $clientDataString');
      
      if (clientDataString != null && clientDataString.isNotEmpty) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å { (–≤–∞–ª–∏–¥–Ω—ã–π JSON)
        if (clientDataString.startsWith('{')) {
          try {
            final clientData = jsonDecode(clientDataString) as Map<String, dynamic>;
            print('Parsed client data: $clientData');
            return clientData;
          } catch (e) {
            print('JSON parsing error: $e');
            // –ï—Å–ª–∏ JSON –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π, –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            await prefs.remove(_clientDataKey);
            return null;
          }
        } else {
          print('Invalid JSON format, clearing data');
          // –û—á–∏—â–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          await prefs.remove(_clientDataKey);
          return null;
        }
      }
      return null;
    } catch (e) {
      print('Error getting driver data: $e');
      return null;
    }
  }

  static Future<Map<String, dynamic>> updateClientProfile(Map<String, dynamic> userData) async {
    try {
      final response = await ApiService.instance.updateClientProfile(userData);
      
      if (response['success']) {
        final data = response['data'];
        final clientData = data?['client'];
        
        if (clientData != null) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
          final prefs = await SharedPreferences.getInstance();
          await prefs.setString(_clientDataKey, jsonEncode(clientData));
          print('Updated client data: ${jsonEncode(clientData)}');
          
          return {
            'success': true,
            'data': {
              'client': clientData,
            },
          };
        }
      }
      
      return {
        'success': false,
        'error': response['error'] ?? '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è',
      };
    } catch (e) {
      print('Profile update error: $e');
      return {
        'success': false,
        'error': '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e',
      };
    }
  }

  static Future<Map<String, dynamic>> updateClientPaymentMethod(String paymentMethod) async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      final clientData = await getCurrentClient();
      if (clientData == null) {
        return {
          'success': false,
          'error': '–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
        };
      }
      
      final clientId = clientData['id'];
      if (clientId == null) {
        return {
          'success': false,
          'error': 'ID –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω',
        };
      }
      
      final response = await ApiService.instance.updateClientPaymentMethod(clientId, paymentMethod);
      
      if (response['success']) {
        final data = response['data'];
        final updatedClientData = data?['client'];
        
        if (updatedClientData != null) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
          final prefs = await SharedPreferences.getInstance();
          await prefs.setString(_clientDataKey, jsonEncode(updatedClientData));
          print('Updated client payment method: ${jsonEncode(updatedClientData)}');
          
          return {
            'success': true,
            'data': {
              'client': updatedClientData,
            },
          };
        }
      }
      
      return {
        'success': false,
        'error': response['error'] ?? '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã',
      };
    } catch (e) {
      print('Payment method update error: $e');
      return {
        'success': false,
        'error': '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e',
      };
    }
  }
}
